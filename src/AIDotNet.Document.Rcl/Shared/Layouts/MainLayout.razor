@inherits LayoutComponentBase
@inject IWindowService WindowService
@inject IJSRuntime JSRuntime

<style>
    .window-buttons {
        position: absolute;
        top: 0;
        right: 0;
        display: flex;
        justify-content: space-between;
        width: 95px;
    }

    .window-buttons button {
        width: 20px;
        height: 20px;
        border: none;
        border-radius: 2px;
        color: white;
        font-weight: bold;
    }

    .minimize {
        background-color: #ffb700;
    }

    .maximize {
        background-color: #00ca00;
    }

    .close {
        background-color: #ff5f5f;
    }

    #floating-ball {
        z-index: 1000;
        width: 60px;
        height: 60px;
        position: fixed;
        bottom: 10px;
        transition: all 0.5s;
        cursor: pointer;
        box-sizing: border-box;
        
        /*往右边移动*/
        animation: moveRight 2s infinite;
        right: -30px;
    }

    #floating-ball:hover {
        right: 10px;
        width: 60px;
        border-radius: 50%;
    }

    #ai-img {
        width: 100%;
        height: 100%;
    }
</style>

<div id="floating-ball" class="floating-ball">
    <img id="ai-img" src="ai.png" />
</div>
<MApp>

    <SideBarPart Width="240"/>

    <MMain>
        <MErrorHandler>
            @Body
        </MErrorHandler>
    </MMain>
</MApp>

<div class="window-buttons">
    <MButton Small Icon OnClick="WindowService.Minimize">
        <MIcon Small>mdi-minus</MIcon>
    </MButton>
    <MButton Small Icon OnClick="WindowService.Maximize">
        @if (WindowService.IsMaximized)
        {
            <MIcon Small>mdi-window-restore</MIcon>
        }
        else
        {
            <MIcon Small>mdi-checkbox-blank-outline</MIcon>
        }
    </MButton>
    <MButton Small Icon OnClick="WindowService.Close">
        <MIcon Small>mdi-close</MIcon>
    </MButton>
</div>
